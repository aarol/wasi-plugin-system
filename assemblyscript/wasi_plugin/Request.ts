// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.0--rc1

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { SyntaxRequest } from "./SyntaxRequest";
import { VersionRequest } from "./VersionRequest";

export class Request {
  static encode(message: Request, writer: Writer): void {
    const syntaxRequest = message.syntaxRequest;
    if (syntaxRequest !== null) {
      writer.uint32(10);
      writer.fork();
      SyntaxRequest.encode(syntaxRequest, writer);
      writer.ldelim();
    }

    const versionRequest = message.versionRequest;
    if (versionRequest !== null) {
      writer.uint32(18);
      writer.fork();
      VersionRequest.encode(versionRequest, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Request {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Request();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.syntaxRequest = SyntaxRequest.decode(reader, reader.uint32());
          break;

        case 2:
          message.versionRequest = VersionRequest.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  syntaxRequest: SyntaxRequest | null;
  versionRequest: VersionRequest | null;

  constructor(
    syntaxRequest: SyntaxRequest | null = null,
    versionRequest: VersionRequest | null = null
  ) {
    this.syntaxRequest = syntaxRequest;
    this.versionRequest = versionRequest;
  }
}

export function encodeRequest(message: Request): Uint8Array {
  return Protobuf.encode(message, Request.encode);
}

export function decodeRequest(buffer: Uint8Array): Request {
  return Protobuf.decode<Request>(buffer, Request.decode);
}
